<Project Sdk="Microsoft.NET.Sdk">

  <Import Project="$(SolutionDir).build/nuget.props" />

  <PropertyGroup>
    <TargetFrameworks>netstandard2.0;net40;net35</TargetFrameworks>

    <AssemblyTitle>Spatial4n</AssemblyTitle>
    <Description>A Geospatial Library for .NET - a .NET port of spatial4j</Description>
    <DocumentationFile>bin\$(Configuration)\$(TargetFramework)\$(AssemblyName).xml</DocumentationFile>
    <Nullable>enable</Nullable>
  </PropertyGroup>

  <PropertyGroup>
    <NoWarn>$(NoWarn);1591;1701;1702;1705</NoWarn>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="GeoAPI" Version="$(GeoAPIPackageReferenceVersion)" />
    <PackageReference Include="NetTopologySuite" Version="$(NetTopologySuitePackageReferenceVersion)" />
  </ItemGroup>

  <ItemGroup>
    <InternalsVisibleTo Include="Spatial4n.Tests" />
  </ItemGroup>

  <UsingTask TaskName="CreateLegacyNamespace" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildBinPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <Files ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
      <OutputDirectory ParameterType="Microsoft.Build.Framework.ITaskItem" Required="true" />
      <ProjectDirectory ParameterType="Microsoft.Build.Framework.ITaskItem" Required="true" />
      <GeneratedFilePaths ParameterType="Microsoft.Build.Framework.ITaskItem[]" Output="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System.IO" />
      <Using Namespace="System.Text.RegularExpressions" />
      <Using Namespace="Microsoft.Build.Framework" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
          Log.LogMessage(MessageImportance.High, "Generating legacy namespace files.");
          if (Files.Length > 0)
          {
            string outDirectory = OutputDirectory.ToString();
            List<ITaskItem> outputFilePaths = new List<ITaskItem>();
            for (int i = 0; i < Files.Length; i++)
            {
              ITaskItem item = Files[i];
              string path = item.GetMetadata("FullPath");
              
              //Log.LogMessage(MessageImportance.High, "TargetPath: " + item.GetMetadata("Directory"));
              if (item.GetMetadata("Directory").Contains(outDirectory))
                  continue;
              
              using (Stream inStream = new FileStream(path, FileMode.Open, FileAccess.Read, FileShare.Read))
              using (StreamReader reader = new StreamReader(inStream, detectEncodingFromByteOrderMarks: true))
              {
                  string fullText = reader.ReadToEnd();
                  if (Regex.IsMatch(fullText, @"(?:\s|!)LEGACY_NAMESPACE(?:\b|\r?\n)"))
                  {
                      reader.BaseStream.Seek(0, SeekOrigin.Begin);
                      string fileDirectory = outDirectory + Path.DirectorySeparatorChar + Path.GetDirectoryName(path).Replace(ProjectDirectory.ToString(), "");
                      //Log.LogMessage(MessageImportance.High, "File directory: " + fileDirectory);
                      string newPath = fileDirectory + Path.DirectorySeparatorChar + Path.GetFileNameWithoutExtension(path) + ".generated" + Path.GetExtension(path);
                      outputFilePaths.Add(new TaskItem(newPath));
                      //Log.LogMessage(MessageImportance.High, newPath);
                      if (!Directory.Exists(fileDirectory))
                          Directory.CreateDirectory(fileDirectory);

                      using (Stream outStream = new FileStream(newPath, FileMode.OpenOrCreate))
                      using (StreamWriter writer = new StreamWriter(outStream, reader.CurrentEncoding))
                      {
                          string line;
                          bool first = true;
                          while ((line = reader.ReadLine()) != null)
                          {
                              if (first)
                              {
                                  first = false;
                                  writer.WriteLine("#define LEGACY_NAMESPACE");
                                  writer.WriteLine("#nullable enable");
                              }
                              writer.WriteLine(line);
                          }
                      }
                  }
              }
            }
            Log.LogMessage(MessageImportance.High, "Files Generated Successfully: " + string.Join(",", (IEnumerable<ITaskItem>)outputFilePaths.ToArray()));
            ITaskItem[] GeneratedFilePaths = outputFilePaths.ToArray();
          }
        ]]>
      </Code>
    </Task>
  </UsingTask>

  <Target Name="MakeLegacyNamespace" BeforeTargets="BeforeBuild;BeforeRebuild" Label="Creates deprecated types in the old namespace to ease with the transition">
    <CreateLegacyNamespace Files="@(Compile)" OutputDirectory="generated" ProjectDirectory="$(MSBuildThisFileDirectory)">
      <Output ItemName="Generated" TaskParameter="GeneratedFilePaths" />
    </CreateLegacyNamespace>
    <ItemGroup>
      <Message Text="Generated files: @(Generated)" Importance="High" />
      <Compile Include="@(Generated)" InProject="false" Visible="false" />
      <!-- For clean to work properly -->
      <FileWrites Include="@(Generated)" />
    </ItemGroup>
  </Target>

</Project>
